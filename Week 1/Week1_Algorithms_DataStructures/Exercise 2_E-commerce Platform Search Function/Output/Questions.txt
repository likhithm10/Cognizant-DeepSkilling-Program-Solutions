1) Explain Big O notation and how it helps in analyzing algorithms.
Sol: Big O notation describes the upper bound of time or space complexity of an algorithm      relative to input size n. It helps us predict how the algorithm performs as data      grows.

2) Describe the best, average, and worst-case scenarios for search operations.
Sol: Linear Search:
	Best case -> O(1)
	Average Case -> O(n)
	Worst Case -> O(n)

     Binary Search:
	Best case -> O(1)
	Average Case -> O(log n)
	Worst Case -> O(log n)

3) Compare the time complexity of linear and binary search algorithms.
Sol: Linear Search Time Complexity: O(n)
     Binary Search Time Complexity: O(log n)

4) Discuss which algorithm is more suitable for your platform and why.
Sol: Binary Search Algorithm is best suited for this as it has many categories of      products in which each category has different products. For large data Binary search      is efficient than the linear search.

